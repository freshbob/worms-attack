package net.ponder2.managedobject;

import java.util.HashMap;
import java.util.Map;

import net.ponder2.objects.P2Object;
import net.ponder2.exception.Ponder2OperationException;
import net.ponder2.exception.Ponder2Exception;
import net.ponder2.ManagedObject;

/**
 * Adaptor object for managed object
 * 
 * @author Auto generated by annotation processor tool
 */
public class Ponder2BrokerP2Adaptor extends net.ponder2.P2ObjectAdaptor {

  /**
   * The map of create operations to constructors
   */
  private final static Map<String, CreateOperation> create;
  /**
   * The map of instance operations to methods
   */
  private final static Map<String, InstanceOperation> operation;

  // Create the call tables when the class is loaded
  static {
    create = new HashMap<String, CreateOperation>();
    operation = new HashMap<String, InstanceOperation>();

    // Create operation 'create' calls constructor for Ponder2Broker
    create.put("create", new CreateOperation() {
      @Override
      public net.ponder2.ManagedObject call(P2Object obj, P2Object source, String operation, P2Object... args)
          throws net.ponder2.exception.Ponder2Exception {
        return new Ponder2Broker(obj);
      }
    });

    // Operation 'sendEvent:args:' calls sendEvent
    operation.put("sendEvent:args:", new InstanceOperation() {
      @Override
      public P2Object call(P2Object thisObj, net.ponder2.ManagedObject obj, P2Object source, String operation, P2Object... args)
          throws net.ponder2.exception.Ponder2Exception {
             ((Ponder2Broker)obj).sendEvent(args[0], args[1]);
        return thisObj;
      }
    });

    // Operation 'setEventMap:event:' calls p2_setEventMap
    operation.put("setEventMap:event:", new InstanceOperation() {
      @Override
      public P2Object call(P2Object thisObj, net.ponder2.ManagedObject obj, P2Object source, String operation, P2Object... args)
          throws net.ponder2.exception.Ponder2Exception {
             ((Ponder2Broker)obj).p2_setEventMap(args[0], args[1]);
        return thisObj;
      }
    });
  }

  public Ponder2BrokerP2Adaptor() {
  }

  public Ponder2BrokerP2Adaptor(P2Object source, String operation, P2Object... args)
      throws Ponder2Exception {
     super(source, operation, args);
  }


  @Override
  public CreateOperation getCreateOperation(String opName) throws net.ponder2.exception.Ponder2OperationException {
    CreateOperation op = create.get(opName);
    return op != null ? op : super.getCreateOperation(opName);
  }

  @Override
  public InstanceOperation getInstanceOperation(String opName) throws net.ponder2.exception.Ponder2OperationException {
    InstanceOperation op = operation.get(opName);
    return op != null ? op : super.getInstanceOperation(opName);
  }

}

